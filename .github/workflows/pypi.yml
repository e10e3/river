name: pypi

on:
  workflow_dispatch:
  push:
    tags:
      - "*"

jobs:
  build_linux_wheels:
    name: Build Python ${{ matrix.python-version }} ~ ${{ matrix.linux_tag }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        linux_tag: ["manylinux", "musllinux"]
        python-version: ["311", "312", "313"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        timeout-minutes: 720
        env:
          CIBW_BUILD: "cp${{ matrix.python-version }}-${{ matrix.linux_tag }}_*"
          CIBW_ARCHS_LINUX: "x86_64 i686"
          CIBW_SKIP: "*-musllinux_i686"
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
          CIBW_ENVIRONMENT_LINUX: 'PATH="$HOME/.cargo/bin:$PATH" CARGO_NET_GIT_FETCH_WITH_CLI="true"'
          CIBW_BEFORE_BUILD: >
            rustup default nightly &&
            rustup show
          CIBW_BEFORE_BUILD_LINUX: >
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain=nightly --profile=minimal -y &&
            rustup show
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.linux_tag }}-${{ matrix.python-version }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_macos_wheels:
    name: Build Python ${{ matrix.python-version }} ~ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14, macos-15]
        python-version: ["311", "312", "313"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - run: rustup target add aarch64-apple-darwin && rustup target add x86_64-apple-darwin
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        timeout-minutes: 720
        env:
          CIBW_BUILD: "cp${{ matrix.python-version }}-*"
          CIBW_ARCHS_MACOS: "universal2"
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
          CIBW_BEFORE_BUILD: >
            rustup default nightly &&
            rustup show
          MACOSX_DEPLOYMENT_TARGET: 10.13
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.python-version }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_windows_wheels:
    name: Build Python ${{ matrix.python-version }} ~ ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2022, windows-2025]
        python-version: ["311", "312", "313"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - run: rustup toolchain install stable-i686-pc-windows-msvc
      - run: rustup target add i686-pc-windows-msvc
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        timeout-minutes: 720
        env:
          CIBW_BUILD: "cp${{ matrix.python-version }}-*"
          CIBW_ARCHS_WINDOWS: "AMD64 x86"
          CIBW_ENVIRONMENT: 'PATH="$HOME/.cargo/bin:$PATH"'
          CIBW_ENVIRONMENT_WINDOWS: 'PATH="$UserProfile\.cargo\bin;$PATH"'
          CIBW_BEFORE_BUILD: >
            rustup default nightly &&
            rustup show
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ matrix.python-version }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build River
        uses: ./.github/actions/install-env
        with:
          python-version: "3.13"

      - name: Build dist
        run: poetry build

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_to_pypi:
    name: Upload all wheels to PyPI
    runs-on: ubuntu-latest
    needs: [build_linux_wheels, build_macos_wheels, build_windows_wheels, build_sdist]
    permissions:
      id-token: write
    steps:
    - uses: actions/download-artifact@v5
      with:
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
